What happens when you initialize a repository? Why do you need to do it?

==============

     When I initialize a repository, git probably gets a command to begin tracking files 
     in the given directory. It must be some kind of preparation to further work. 

==============

How is the staging area different from the working directory and the repository? What value do you think it offers?

==============

     Staging area can contain less files than the working directory. It is more 'targeted'
     set of files, containing changes I want to commit. These files are already 
     included in the repository, but need to be updated. By using staging area one can
     control changes better and make the later navigation through these changes easier
     to perform.
     
     UPD: [new explanation] 
     In staging area, there are only those files changes to which I want to commit.
     On committing, only changes to this file/these files will be committed.
     If I work simultaneously upon some other files but don't include them in staging area,
     git will not modify them on committing.
     
==============

How can you use the staging area to make sure you have one commit per logical change?

==============

     Staging area helps to separate one logical change from another by targeting 
     specific files. Also, git diff and git diff --staged commands which operates 
     on the content of staging area help to control each change and to ensure that 
     only the desired changes will be committed.
     
==============

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

==============

     Branches organize 'the history' of my work not by chronological principles, but 
     by the content and functionality. Still, as some functions can be added or 
     altered after the other, there is some linear time usage of branches.