What happens when you initialize a repository? Why do you need to do it?

==============

     When I initialize a repository, git probably gets a command to begin tracking files 
     in the given directory. It must be some kind of preparation to further work. 

==============

How is the staging area different from the working directory and the repository? What value do you think it offers?

==============

     Staging area can contain less files than the working directory. It is more 'targeted'
     set of files, containing changes I want to commit. These files are already 
     included in the repository, but need to be updated. By using staging area one can
     control changes better and make the later navigation through these changes easier
     to perform.
     
     UPD: [new explanation] 
     In staging area, there are only those files changes to which I want to commit.
     On committing, only changes to this file/these files will be committed.
     If I work simultaneously upon some other files but don't include them in staging area,
     git will not modify them on committing.
     
==============

How can you use the staging area to make sure you have one commit per logical change?

==============

     Staging area helps to separate one logical change from another by targeting 
     specific files. Also, git diff and git diff --staged commands which operates 
     on the content of staging area help to control each change and to ensure that 
     only the desired changes will be committed.
     
==============

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

==============

     Branches organize 'the history' of my work not by chronological principles, but 
     by the content and functionality. Still, as some functions can be added or 
     altered after the other, there is some linear time usage of branches.
     
==============

How do the diagrams help you visualize the branch structure?

==============

     Diagrams show three main things:
     - the contest of changes (what changes have been made)
     - the consequence of changes (in what order)
     - the connection of changes (branches) 
     
==============
     
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

==============

     The result of merging is 'the sum' of all changes (commits) made to the file on 
     branches to merge. Namely, deletion and addition of some lines of code. 
     If, for example, some line was edited, it is represented in commit as old 
     version of the line deleted and new version added ( - and + ).
     
     The process of merging is somewhat mechanical procedure. Therefore, problems might 
     arise if merging is being done by 'blind' combination of commits. 
     For instance, Clair might code lines A...B to implement some color function.
     John was also working on the same problem but came up with the different solution
     (say, C...D). If do not control merging process, both versions (A...B and C...D)
     will be included in the final merged version. That is unnecessary as A...B and C...D
     account for the same functionality.
     In real world, I suppose, Clair and John communicated and were aware of what each of
     the is doing, probably working on TWO different branches dedicated to the color issue, 
     say, color1 and color2. Then, no one will merge these branches as they solve the 
     same problem.
     
     The visualization of merging by a diagram is useful because it shows real history of
     commits, unlike linear representation in git log. Commits in merged version are 
     listed in chronological order, but their connection with 'parent' commits in an 
     original branch may be more important than actual time when the commit was made.
     Diagram visualize both time and connection parameters of commits.

     UPD: (after the lesson on merging)
     In fact, there ARE situations when git cannot figure out what changes keep if they 
     were made in one piece of code. This is called merge conflict and git has instruments
     to resolve it.
     Still, I cannot understand, how it identifies where there is a conflict and where
     there are only two unrelated pieces of code both of which should be included in 
     the final version. For example, users can write their own versions of the same 
     function in different part of the program, so git will not see them as related 
     to the same code area; but they in fact create a conflict.